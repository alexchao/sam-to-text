# -*- coding: utf-8 -*-
import json

from sam_to_text.processors.transcript_chunker import TranscriptChunker


def process_watson_transcript(config):
    """Process a transcript generated by the IBM Watson speech recognize API.
    """
    chunker = TranscriptChunker()

    # TODO: don't assume 1 file
    file_path = config.source_files[0]
    with open(file_path, 'r') as f:
        result_json = json.loads(f.read())

    time_to_speaker_label = {
        (label['from'], label) for label in result_json['speaker_labels']
    }

    for result in result_json['results']:
        best_result = result['alternatives'][0]

        if len(result['alternatives']) > 1:
            raise Exception('Found > 1 alternatives for result: {}'.format(
                best_result['transcript']))
        if not result['final']:
            raise Exception('Found non-final result: {}'.format(
                best_result['transcript']))

        transcript_html = make_paragraph_from_result(best_result)
        chunker.add_transcript(best_result['transcript'], transcript_html)

    return chunker.get_chunks()


def make_paragraph_from_result(result):
    words = []
    for i, timestamp in enumerate(result['timestamps']):
        utterance, ts_from, _ = timestamp
        word_confidence = result['word_confidence'][i]
        if word_confidence[0] != utterance:
            raise Exception(
                'Found timestamp-word_confidence mismatch: {}'.format(
                    word_confidence[0] + ' /= ' + utterance))

        if word_confidence[1] < 0.2:
            words.append('<span class="confidence-low">{}</span>'.format(
                utterance))
        elif word_confidence[1] < 0.4:
            words.append('<span class="confidence-medium">{}</span>'.format(
                utterance))
        else:
            words.append(utterance)

    spaced_phrase = ' '.join(words)
    return '<p>{}</p>'.format(spaced_phrase)
